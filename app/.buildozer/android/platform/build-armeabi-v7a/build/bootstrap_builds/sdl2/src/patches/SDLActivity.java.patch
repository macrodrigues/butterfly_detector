--- a/src/main/java/org/libsdl/app/SDLActivity.java
+++ b/src/main/java/org/libsdl/app/SDLActivity.java
@@ -94,6 +94,8 @@
     // This is what SDL runs in. It invokes SDL_main(), eventually
     protected static Thread mSDLThread;

+    public static int keyboardInputType = InputType.TYPE_CLASS_TEXT | InputType.TYPE_TEXT_VARIATION_VISIBLE_PASSWORD;
+
     protected static SDLGenericMotionListener_API12 getMotionListener() {
         if (mMotionListener == null) {
             if (Build.VERSION.SDK_INT >= 26) {
@@ -196,6 +198,15 @@
         Log.v(TAG, "onCreate()");
         super.onCreate(savedInstanceState);

+        SDLActivity.initialize();
+        // So we can call stuff from static callbacks
+        mSingleton = this;
+    }
+
+    // We don't do this in onCreate because we unpack and load the app data on a thread
+    // and we can't run setup tasks until that thread completes.
+    protected void finishLoad() {
+
         // Load shared libraries
         String errorMsgBrokenLib = "";
         try {
@@ -639,7 +650,7 @@
     Handler commandHandler = new SDLCommandHandler();

     // Send a message from the SDLMain thread
-    boolean sendCommand(int command, Object data) {
+    protected boolean sendCommand(int command, Object data) {
         Message msg = commandHandler.obtainMessage();
         msg.arg1 = command;
         msg.obj = data;
@@ -1051,6 +1062,21 @@
         return Arrays.copyOf(filtered, used);
     }

+    /**
+     * Calls turnActive() on singleton to keep loading screen active
+     */
+    public static void triggerAppConfirmedActive() {
+        mSingleton.appConfirmedActive();
+    }
+
+    /**
+     * Trick needed for loading screen, overridden by PythonActivity
+     * to keep loading screen active
+     */
+    public void appConfirmedActive() {
+    }
+
+
     // APK expansion files support

     /** com.android.vending.expansion.zipfile.ZipResourceFile object or null. */
@@ -1341,14 +1367,13 @@
     };

     public void onSystemUiVisibilityChange(int visibility) {
-        if (SDLActivity.mFullscreenModeActive && (visibility & View.SYSTEM_UI_FLAG_FULLSCREEN) == 0 || (visibility & View.SYSTEM_UI_FLAG_HIDE_NAVIGATION) == 0) {
-
+        // SDL2 BUGFIX (see sdl bug #4424 ) - REMOVE WHEN FIXED IN UPSTREAM !!
+        if (SDLActivity.mFullscreenModeActive && ((visibility & View.SYSTEM_UI_FLAG_FULLSCREEN) == 0 || (visibility & View.SYSTEM_UI_FLAG_HIDE_NAVIGATION) == 0)) {
             Handler handler = getWindow().getDecorView().getHandler();
             if (handler != null) {
                 handler.removeCallbacks(rehideSystemUi); // Prevent a hide loop.
                 handler.postDelayed(rehideSystemUi, 2000);
             }
-
         }
     }

@@ -1475,6 +1500,7 @@
         String[] arguments = SDLActivity.mSingleton.getArguments();

         Log.v("SDL", "Running main function " + function + " from library " + library);
+        SDLActivity.mSingleton.appConfirmedActive();
         SDLActivity.nativeRunMain(library, function, arguments);

         Log.v("SDL", "Finished main function");
@@ -2002,7 +2028,7 @@
     public InputConnection onCreateInputConnection(EditorInfo outAttrs) {
         ic = new SDLInputConnection(this, true);

-        outAttrs.inputType = InputType.TYPE_CLASS_TEXT | InputType.TYPE_TEXT_VARIATION_VISIBLE_PASSWORD;
+        outAttrs.inputType = SDLActivity.keyboardInputType;
         outAttrs.imeOptions = EditorInfo.IME_FLAG_NO_EXTRACT_UI
                 | EditorInfo.IME_FLAG_NO_FULLSCREEN /* API 11 */;
